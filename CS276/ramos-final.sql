-- Step 1 run scripts
SET SERVEROUTPUT ON;
SET FEEDBACK ON;

-- Step 2
-- a)	Write a function called NUM_CREDITS that given a term and a student_id 
-- returns the number of credits that student took that term. Test this function
-- by calling it will a student_id of 'L22222222' and a term code of 201940 and 
-- displaying the number of credits. 

CREATE OR REPLACE FUNCTION NUM_CREDITS(STUDENT_ID_IN STUDENT.STUDENT_ID%TYPE,
                                      TERM_IN ENROLLMENT.TERM_CODE%TYPE)
RETURN NUMBER 
IS
  V_NUM_CREDITS NUMBER := 0;
  BEGIN
    SELECT SUM(COURSE_CREDIT) INTO V_NUM_CREDITS
      FROM CREDIT C
      JOIN ENROLLMENT E ON C.COURSE_NUMBER = E.COURSE_NUMBER
      JOIN STUDENT S ON E.STUDENT_ID = S.STUDENT_ID
      WHERE S.STUDENT_ID = STUDENT_ID_IN AND E.TERM_CODE = TERM_IN;
    RETURN V_NUM_CREDITS;
  END;

DECLARE
  NUM_STUDENT_CREDITS NUMBER := 0;
BEGIN
  NUM_STUDENT_CREDITS := NUM_CREDITS('L22222222', 201940);
  DBMS_OUTPUT.PUT_LINE('STUDENT: L22222222 TOOK '|| NUM_STUDENT_CREDITS ||
  ' CREDITS IN THE TERM 201940');
END;


-- STEP 2B
CREATE OR REPLACE PROCEDURE CALC_TUITION(TERM_ID_IN IN ENROLLMENT.TERM_CODE%TYPE)
IS
  CURSOR STUDENT_CUR IS 
    SELECT STUDENT_ID, STUDENT_FIRST, STUDENT_LAST
      FROM STUDENT;
BEGIN
  FOR STUDENT_REC IN STUDENT_CUR
    LOOP
    
      DBMS_OUTPUT.PUT_LINE('STUDENT: '|| STUDENT_REC.STUDENT_ID ||' '||
      STUDENT_REC.STUDENT_FIRST ||' '|| STUDENT_REC.STUDENT_LAST ||' HAS A TUITION'||
      ' COST OF: '|| NUM_CREDITS(STUDENT_REC.STUDENT_ID, TERM_ID_IN) * 130);
    END LOOP;
END CALC_TUITION;

BEGIN
  CALC_TUITION(201940);
END;


-- STEP 2C
-- c)	Write an AFTER UPDATE trigger that outputs the student_id, first name, 
-- last name, previous grade and new grade when an UPDATE statement altering a 
-- grade in the enrollment table is executed. Test your trigger by updating the
-- CS120 grade for student_id 'L11111111' to an 'A'. 

CREATE OR REPLACE PROCEDURE GET_STUDENT_INFO(STUDENT_ID_IN IN STUDENT.STUDENT_ID%TYPE)
IS
    V_FIRST STUDENT.STUDENT_FIRST%TYPE;
    V_LAST STUDENT.STUDENT_LAST%TYPE;
  BEGIN
    SELECT STUDENT_FIRST, STUDENT_LAST INTO V_FIRST, V_LAST
    FROM STUDENT
    WHERE STUDENT_ID = STUDENT_ID_IN;
    DBMS_OUTPUT.PUT_LINE('STUDENT ID: '|| STUDENT_ID_IN);
    DBMS_OUTPUT.PUT_LINE('FIRST NAME: '|| V_FIRST);
    DBMS_OUTPUT.PUT_LINE('LAST NAME: '|| V_LAST);
  END GET_STUDENT_INFO;

CREATE OR REPLACE TRIGGER UPDATE_STUDENT_GRADE
AFTER UPDATE OF GRADE ON ENROLLMENT
FOR EACH ROW
  BEGIN
    GET_STUDENT_INFO(:OLD.STUDENT_ID);
    DBMS_OUTPUT.PUT_LINE('PREVIOUS GRADE: '|| :OLD.GRADE);
    DBMS_OUTPUT.PUT_LINE('NEW GRADE: '|| :NEW.GRADE);
  END;

UPDATE ENROLLMENT SET GRADE = 'A'
  WHERE STUDENT_ID = 'L11111111'
  AND COURSE_NUMBER = 'CS120';
  
  ROLLBACK;