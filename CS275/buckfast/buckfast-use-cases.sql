-- BUCKFAST USE CASES --

-- 1
-- A customer makes purchases in two of the stores.  You need to track which 
-- of the stores the purchase was made in, as well as the product, the number 
-- of products sold (ie. 5 cinnamon candles), and the price of the product.  
-- You will also need to update the inventory of the store to reflect the 
-- purchase.

-- Find which customers have made multiple purchases.
SELECT COUNT(FK_CUSTOMER_ID), FK_CUSTOMER_ID  FROM BASALE_TRANSACTION GROUP BY FK_CUSTOMER_ID
HAVING COUNT(FK_CUSTOMER_ID) > 1 ORDER BY FK_CUSTOMER_ID ;

--WHOLE CUSTOMER TRANSACTION
SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, ST.SALE_TRANSACTION_ID, ST.TRANSACTION_DATE, 
  LI.QUANTITY AS PURCHASED_AMT, P.PRODUCT_ID, P.PRODUCT_NAME, P.PRODUCT_PRICE, SILI.QUANTITY AS QOH, B.BUSINESS_NAME
FROM BACUSTOMER C
JOIN BASALE_TRANSACTION ST ON ST.FK_CUSTOMER_ID = C.CUSTOMER_ID
JOIN BATRANSACTION_LINE_ITEM LI ON ST.SALE_TRANSACTION_ID = LI.FK_SALE_TRANSACTION_ID
JOIN BAPRODUCT P ON P.PRODUCT_ID =  LI.FK_PRODUCT_ID
JOIN BASTORE_INVENTORY_LINEITEM SILI ON SILI.FK_PRODUCT_ID = P.PRODUCT_ID
JOIN BASHIPMENT SHIP ON SHIP.SHIPMENT_ID = SILI.FK_SHIPMENT_ID
JOIN BASTORE_INVENTORY SI ON SI.STORE_INVENTORY_ID = SHIP.FK_STORE_INVENTORY_ID
JOIN BASTORE_ENTITY E ON E.BUSINESS_ID = SI.FK_BUSINESS_ID
JOIN BABUSINESS B ON B.BUSINESS_ID = E.BUSINESS_ID
WHERE C.CUSTOMER_ID = 'C1004'
;

--QOH
SELECT SUM(SILI.QUANTITY - LI.QUANTITY), P.PRODUCT_ID, P.PRODUCT_NAME
FROM BACUSTOMER C
JOIN BASALE_TRANSACTION ST ON ST.FK_CUSTOMER_ID = C.CUSTOMER_ID
JOIN BATRANSACTION_LINE_ITEM LI ON ST.SALE_TRANSACTION_ID = LI.FK_SALE_TRANSACTION_ID
JOIN BAPRODUCT P ON P.PRODUCT_ID =  LI.FK_PRODUCT_ID
JOIN BASTORE_INVENTORY_LINEITEM SILI ON SILI.FK_PRODUCT_ID = P.PRODUCT_ID
JOIN BASHIPMENT SHIP ON SHIP.SHIPMENT_ID = SILI.FK_SHIPMENT_ID
JOIN BASTORE_INVENTORY SI ON SI.STORE_INVENTORY_ID = SHIP.FK_STORE_INVENTORY_ID
WHERE C.CUSTOMER_ID = 'C1004'
GROUP BY P.PRODUCT_ID, P.PRODUCT_NAME
;



UPDATE BASTORE_INVENTORY_LINEITEM
SET QUANTITY = (QUANTITY - (SELECT LI.QUANTITY
                            FROM BACUSTOMER C
                            JOIN BASALE_TRANSACTION ST ON ST.FK_CUSTOMER_ID = C.CUSTOMER_ID
                            JOIN BATRANSACTION_LINE_ITEM LI ON ST.SALE_TRANSACTION_ID = LI.FK_SALE_TRANSACTION_ID
                            JOIN BAPRODUCT P ON P.PRODUCT_ID =  LI.FK_PRODUCT_ID
                            JOIN BASTORE_INVENTORY_LINEITEM SILI ON SILI.FK_PRODUCT_ID = P.PRODUCT_ID
                            WHERE C.CUSTOMER_ID = 'C1004'
                            AND P.PRODUCT_ID = 'SKU1011'
                            ) 
                )
                WHERE FK_PRODUCT_ID = 'SKU1011'
;

UPDATE BASTORE_INVENTORY_LINEITEM
SET QUANTITY = (QUANTITY - (SELECT LI.QUANTITY
                            FROM BACUSTOMER C
                            JOIN BASALE_TRANSACTION ST ON ST.FK_CUSTOMER_ID = C.CUSTOMER_ID
                            JOIN BATRANSACTION_LINE_ITEM LI ON ST.SALE_TRANSACTION_ID = LI.FK_SALE_TRANSACTION_ID
                            JOIN BAPRODUCT P ON P.PRODUCT_ID =  LI.FK_PRODUCT_ID
                            JOIN BASTORE_INVENTORY_LINEITEM SILI ON SILI.FK_PRODUCT_ID = P.PRODUCT_ID
                            WHERE C.CUSTOMER_ID = 'C1004'
                            AND P.PRODUCT_ID = 'SKU1000'
                            ) 
                )
                WHERE FK_PRODUCT_ID = 'SKU1000'
;
COMMIT;

SELECT * FROM BASTORE_INVENTORY_LINEITEM;



-- 2
-- TOTAL NUMBER OF SALES FOR A SINGLE STORE FOR THE MONTH OF JUNE 2019. This 
-- query should include the store name, and the total sales.

SELECT TO_CHAR(SUM(TLI.QUANTITY * P.PRODUCT_PRICE), 'FML99G999D00','NLS_NUMERIC_CHARACTERS = ''.,'' NLS_CURRENCY=€') 
AS TOTAL_SALES , BUSINESS_NAME 
FROM BASALE_TRANSACTION T
JOIN BATRANSACTION_LINE_ITEM TLI ON T.SALE_TRANSACTION_ID = TLI.FK_SALE_TRANSACTION_ID
JOIN BAPRODUCT P ON P.PRODUCT_ID = TLI.FK_PRODUCT_ID
JOIN BASTORE_INVENTORY_LINEITEM SILI ON P.PRODUCT_ID = SILI.FK_PRODUCT_ID
JOIN BASHIPMENT SHIP ON SILI.FK_SHIPMENT_ID = SHIP.SHIPMENT_ID
JOIN BASTORE_INVENTORY SI ON SHIP.FK_STORE_INVENTORY_ID = SI.STORE_INVENTORY_ID
JOIN BASTORE_ENTITY SE ON SI.FK_BUSINESS_ID = SE.BUSINESS_ID
JOIN BABUSINESS ON SE.BUSINESS_ID = BABUSINESS.BUSINESS_ID
WHERE T.TRANSACTION_DATE BETWEEN TO_DATE('6-1-19', 'MM-DD-YY') AND TO_DATE('6-30-19', 'MM-DD-YY')
AND BUSINESS_NAME = 'GIFT SHOP'
GROUP BY BUSINESS_NAME;


-- 3
-- A new employee is hired for the Grange Restaurant.  You will need to track
-- their hours and their pay rate per hour.  Calculate their salary for the 
-- week of June 1 through June 8.


SELECT SUM(EXTRACT(HOUR FROM BASHIFT.END_DATE_TIME) 
          - EXTRACT(HOUR FROM BASHIFT.START_DATE_TIME)) 
          *
          (SELECT DISTINCT PAY_RATE FROM BAPAYCHECK 
          WHERE BAPAYCHECK.FK_EMPLOYEE_ID = 'L107')
      AS PAY_AMOUNT
FROM BASHIFT 
JOIN BAPAYCHECK ON BAPAYCHECK.FK_EMPLOYEE_ID = BASHIFT.FK_EMPLOYEE_ID
WHERE BAPAYCHECK.FK_EMPLOYEE_ID = 'L107'
GROUP BY BAPAYCHECK.FK_EMPLOYEE_ID;






-- 4
-- A Visitor makes a reservation for June 1, 2019 to June 14, 2019 for one of 
-- the Guest Houses, and a monk must be assigned for each of those weeks.  
-- Display the Visitor name, the Guest house, and the monk assigned for each week.
SELECT C.FIRST_NAME AS CUSTOMER_FIRST, C.LAST_NAME AS CUSTOMER_LAST, 
  BUSINESS_NAME, E.FIRST_NAME AS EMP_FIRST, E.LAST_NAME AS EMP_LAST, 
  ASSI.START_DATE AS SCHEDULE_START, ASSI.END_DATE AS SCHEDULE_END,
  R.DATE_START AS RESERVARTION_START_DATE, R.DATE_END AS RESERVATION_END_DATE
FROM BARESERVATION R
JOIN BAGUESTHOUSE_RESERVATION GHR ON R.RESERVATION_ID = GHR.FK_RESERVATION_ID
JOIN BAGUESTHOUSE_ROOM ROOM ON ROOM.GUESTHOUSE_ROOM_ID = GHR.FK_GUESTHOUSE_ROOM_ID
JOIN BAGUESTHOUSE GH  ON GH.BUSINESS_ID = ROOM.FK_BUSINESS_ID
JOIN BABUSINESS ON BABUSINESS.BUSINESS_ID = GH.BUSINESS_ID
JOIN BAASSIGNED_SCHEDULE ASSI ON ASSI.FK_BUSINESS_ID = GH.BUSINESS_ID
JOIN BASHIFT ON ASSI.ASSIGNED_SCHEDULE_ID = BASHIFT.FK_ASSIGNED_SCHEDULE_ID
JOIN BAEMPLOYEE E ON BASHIFT.FK_EMPLOYEE_ID = E.EMPLOYEE_ID
JOIN BACUSTOMER C ON C.CUSTOMER_ID = R.FK_CUSTOMER_ID
WHERE R.DATE_START = TO_DATE('6-1-19', 'MM-DD-YY') 
  AND R.DATE_END = TO_DATE('6-14-19','MM-DD-YY');


-- 5 -- 
-- The Abbot wants to know how many distinct guests have reservations at the 
-- abbey from June 1 to August 31 in 2019.  Even if I have stayed at the abbey
-- twice, I should only be counted once.
SELECT DISTINCT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME
FROM BACUSTOMER C 
JOIN BARESERVATION R ON R.FK_CUSTOMER_ID = C.CUSTOMER_ID
JOIN BAGUESTHOUSE_RESERVATION GHR ON GHR.FK_RESERVATION_ID = R.RESERVATION_ID
WHERE R.DATE_START >= TO_DATE('6-1-19', 'MM-DD-YY')
  AND R.DATE_END <= TO_DATE('8-31-19', 'MM-DD-YY');


-- 6
-- The Abbott wants to know how many rooms do NOT have reservations at the
-- abbey on Saturday, June 8, 2019.


-- TOTAL COUNT OF ALL ROOMS
SELECT COUNT(ROOM.GUESTHOUSE_ROOM_ID) AS AVAILABLE_ROOMS
FROM BAGUESTHOUSE_ROOM ROOM
LEFT JOIN BAGUESTHOUSE_RESERVATION GHR ON ROOM.GUESTHOUSE_ROOM_ID = GHR.FK_GUESTHOUSE_ROOM_ID
LEFT JOIN BARESERVATION R ON R.RESERVATION_ID = GHR.FK_RESERVATION_ID;



-- Number of rooms that do not have reservations on Saturday June 8, 2019.
SELECT COUNT(ROOM.GUESTHOUSE_ROOM_ID) AS AVAILABLE_ROOMS
FROM BAGUESTHOUSE_ROOM ROOM
LEFT JOIN BAGUESTHOUSE_RESERVATION GHR ON ROOM.GUESTHOUSE_ROOM_ID = GHR.FK_GUESTHOUSE_ROOM_ID
LEFT JOIN BARESERVATION R ON R.RESERVATION_ID = GHR.FK_RESERVATION_ID
WHERE ROOM.GUESTHOUSE_ROOM_ID NOT IN 
  (SELECT BAGHR.GUESTHOUSE_ROOM_ID 
    FROM BAGUESTHOUSE_ROOM BAGHR 
    JOIN BAGUESTHOUSE_RESERVATION BARES ON BARES.FK_GUESTHOUSE_ROOM_ID = BAGHR.GUESTHOUSE_ROOM_ID
    JOIN BARESERVATION RESERVATION ON RESERVATION.RESERVATION_ID = BARES.FK_RESERVATION_ID
    WHERE TO_DATE('6-8-19', 'MM-DD-YY') BETWEEN RESERVATION.DATE_START AND RESERVATION.DATE_END);


-- 7
-- The Abbott wants to know all room numbers, as well as those customer names 
-- that are staying at the monastery on Friday, June 7, 2019.



SELECT GHR.ROOM_NAME, C.FIRST_NAME, C.LAST_NAME, BAR.DATE_START AS RESERVATION_START, BAR.DATE_END AS RESERVATION_END
FROM BAGUESTHOUSE_ROOM GHR
LEFT OUTER JOIN BAGUESTHOUSE_RESERVATION GHRES ON GHRES.FK_GUESTHOUSE_ROOM_ID = GHR.GUESTHOUSE_ROOM_ID
LEFT OUTER JOIN (SELECT RESERVE.RESERVATION_ID, RESERVE.DATE_START, RESERVE.DATE_END, RESERVE.FK_CUSTOMER_ID
    FROM BARESERVATION RESERVE
    WHERE TO_DATE('6-7-19', 'MM-DD-YY') 
    BETWEEN RESERVE.DATE_START AND RESERVE.DATE_END) BAR ON BAR.RESERVATION_ID = GHRES.FK_RESERVATION_ID
LEFT OUTER JOIN (
    SELECT CU.CUSTOMER_ID, CU.FIRST_NAME, CU.LAST_NAME  
    FROM BACUSTOMER CU 
    JOIN BARESERVATION RESERVE ON CU.CUSTOMER_ID = RESERVE.FK_CUSTOMER_ID 
    JOIN BAGUESTHOUSE_RESERVATION GHRV ON GHRV.FK_RESERVATION_ID = RESERVE.RESERVATION_ID
    WHERE TO_DATE('6-7-19', 'MM-DD-YY')
    BETWEEN  RESERVE.DATE_START AND RESERVE.DATE_END
    ) C ON BAR.FK_CUSTOMER_ID = C.CUSTOMER_ID
ORDER BY GHR.ROOM_NAME;




-- 8
-- The Abbot would like to know if there are any visitors that have made 
-- repeat visits (MORE THAN 1) so they can direct market efforts toward them. 
-- include customer address

SELECT COUNT(C.CUSTOMER_ID) AS CUSTOMER_VISIT_COUNT, C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME
FROM BASALE_TRANSACTION BAST 
JOIN BACUSTOMER C ON C.CUSTOMER_ID = BAST.FK_CUSTOMER_ID
JOIN BARESERVATION BAR ON C.CUSTOMER_ID = BAR.FK_CUSTOMER_ID
GROUP BY C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME
HAVING COUNT(C.CUSTOMER_ID) >= 2;



-- 9
-- Each week inventory must be taken to determine if anything needs to be 
-- reordered.  Using a single SQL query, determine which products are in need
-- of reordering.  This means you have to calculate not only what you have
-- in stock, but what you have sold this week for a particular product.
-- LIST OF PRODUCTS TO ORDER
SELECT P.PRODUCT_ID, QOH AS AMT_ON_HAND, COUNT_PURCHASED AS AMT_TO_ORDER
FROM BAPRODUCT P
JOIN
(
  SELECT COUNT(BATLI.FK_PRODUCT_ID) AS COUNT_PURCHASED, P.PRODUCT_ID, SILI.QUANTITY AS QOH
  FROM BAPRODUCT P
  JOIN BATRANSACTION_LINE_ITEM BATLI ON BATLI.FK_PRODUCT_ID =  P.PRODUCT_ID
  JOIN BASTORE_INVENTORY_LINEITEM SILI ON SILI.FK_PRODUCT_ID = P.PRODUCT_ID
  GROUP BY P.PRODUCT_ID, SILI.QUANTITY
) PLI
ON PLI.PRODUCT_ID = P.PRODUCT_ID
GROUP BY P.PRODUCT_ID, QOH, COUNT_PURCHASED
ORDER BY P.PRODUCT_ID;








-- 10
-- Write a stored procedure to take in a product ID and a delivery amount and 
-- price and insert it into the database.  This will require updating the 
-- inventory count.

DROP SEQUENCE STORE_INVENTORY_LINEITEM_SEQ;
CREATE SEQUENCE STORE_INVENTORY_LINEITEM_SEQ
START WITH 10015 -- current store_inventory_lineitem
INCREMENT BY 1;



CREATE OR REPLACE PROCEDURE UPDATE_PRODUCT_INVENTORY_COUNT(
  STORE_INVENTORY_LINEITEM_ID_ARG IN NUMBER,
  PROD_ID_ARG IN VARCHAR, -- the product id to look up
  SHIPMENT_ID_ARG IN VARCHAR, -- the shipment that the inventory came in on
  PROD_PRICE_ARG IN NUMBER, -- the new incoming price for the product
  PROD_QUANTITY_ARG IN NUMBER-- amount of product being changed
) 
IS 
BEGIN
INSERT INTO BASHIPMENT(SHIPMENT_ID, FK_STORE_INVENTORY_ID, FK_VENDOR_ID, DATE_RECEIVED) 
  VALUES 
  (SHIPMENT_ID_ARG, --shipment id
  (SELECT FK_PRODUCT_TYPE_ID FROM BAPRODUCT WHERE BAPRODUCT.PRODUCT_ID = PROD_ID_ARG),  -- fk_store_inventory_id
  (SELECT DISTINCT SHIP.FK_VENDOR_ID
  FROM BASHIPMENT SHIP 
  JOIN BASTORE_INVENTORY_LINEITEM SILI ON SILI.FK_SHIPMENT_ID = SHIP.SHIPMENT_ID
  JOIN BAPRODUCT P ON P.PRODUCT_ID = SILI.FK_PRODUCT_ID
  WHERE P.PRODUCT_ID = PROD_ID_ARG), -- fk_vendor_id
  SYSDATE); -- date received

INSERT INTO BASTORE_INVENTORY_LINEITEM (STORE_INVENTORY_LINEITEM_ID, FK_PRODUCT_ID, FK_SHIPMENT_ID, QUANTITY)
VALUES (STORE_INVENTORY_LINEITEM_ID_ARG, PROD_ID_ARG, SHIPMENT_ID_ARG, PROD_QUANTITY_ARG);

UPDATE BAPRODUCT SET PRODUCT_PRICE = PROD_PRICE_ARG WHERE PRODUCT_ID = PROD_ID_ARG;

END;
/



-- BEFORE UPDATE
SELECT *  
FROM BASTORE_INVENTORY_LINEITEM SILI
JOIN BASHIPMENT SHIP ON SILI.FK_SHIPMENT_ID = SHIP.SHIPMENT_ID
JOIN BAPRODUCT P ON P.PRODUCT_ID = SILI.FK_PRODUCT_ID
WHERE FK_PRODUCT_ID = 'SKU1001';


-- RUNNING PROCEDURE

BEGIN
  UPDATE_PRODUCT_INVENTORY_COUNT(STORE_INVENTORY_LINEITEM_SEQ.NEXTVAL, 'SKU1001', 'SHIP-016', 13.50, 12);
END;
/


-- AFTER UPDATE
SELECT *  
FROM BASTORE_INVENTORY_LINEITEM SILI
JOIN BASHIPMENT SHIP ON SILI.FK_SHIPMENT_ID = SHIP.SHIPMENT_ID
JOIN BAPRODUCT P ON P.PRODUCT_ID = SILI.FK_PRODUCT_ID
WHERE FK_PRODUCT_ID = 'SKU1001';

COMMIT;

